import '../styling/HeaderPages.css';
function DocumentationPage() {
	return (
		<>
			<div className="main-div-header-pages">
				<h2>1. Description of the Project</h2>
				<p>
					This website is built with the purpose of showcasing
					different foods and dishes that are common in Norway or have
					originated there. The website has ordered the dishes into
					different narratives, each with underlying chapters. Each
					narrative has a description for that narrative and what to
					expect. Each chapter also has a description for that
					particular chapter.
				</p>
				<p>
					For example, in the historic narrative, each chapter is a
					time period, each of which has a description about that time
					period. Each item is described with a name, an English
					translation, an image, some metadata describing different
					interesting characteristics about the food, and a set of
					descriptions. In total, there are nine different
					descriptions, each with a different length and "level of
					difficulty".
				</p>
				<p>
					For each level of difficulty, there is in reality only one
					text, but it is divided into three chunks that build upon
					the previous chunk of text. This is done to create an
					engaging experience for the user where they will get more
					and more in-depth information as they please, by asking for
					more text. These texts are all generated by ChatGPT but are
					proof-read and edited to ensure quality.
				</p>
				<p>
					Each item also has a QR code associated with it, which
					redirects to a website where the user can read more about
					the item. These sources are all in English, as the website's
					intended audience is not Norwegian.
				</p>
				<p>
					The website provides a set of four different themes when
					navigating the chapters and items, all with a different
					connection to Norwegian culture. There is also a base layout
					available for a more "sterile" experience.
				</p>

				<h2>2. Architecture</h2>
				<p>
					The website is built with a separation between the frontend
					and backend. For simplicity, the logic is built directly
					into the presentation layer, making the website a
					three-layered application if you count the API, server, and
					database storage as one layer, as the API and server are
					also built together in the same file.
				</p>
				<p>
					The frontend is built with Vite, React, and TypeScript. The
					backend is built with Express.js on top of Node.js and uses
					a remote MongoDB database for storage.
				</p>

				<h3>2.1 Frontend</h3>
				<p>
					The web stack for the frontend is chosen because of the low
					barrier of entry for creating simple applications. React
					allows us to generate HTML dynamically through JSX,
					according to our needs. We wanted to avoid creating static
					HTML documents, as we wished for our content to be dynamic
					and easily changeable, for example if we were to change a
					narrative or the items on display.
				</p>
				<p>
					This is a lot easier with dynamically generated HTML, rather
					than through static documents. It also ensures all chapters
					and items follow the same visual layout and profile, as this
					is now defined in the page files that generate the chapters
					and items.
				</p>
				<p>
					The consequence of this choice is that our logic is placed
					in the same files as the presentation, as opposed to a
					separate JS file like you would do in static
					HTML/CSS/JS-style applications. The choice of Vite as a
					build tool stems from previous experience with the tool,
					while TypeScript was chosen for type-safety and more robust
					and maintainable code than with plain JavaScript, also
					following our goal of a dynamic and easily changeable
					website.
				</p>

				<h3>2.2 Backend</h3>
				<p>
					The backend is built with Express.js on top of Node.js. The
					simple reason is that this is a very common structure. For
					simplicity, we have created both the server and the API
					endpoints in the same file.
				</p>
				<p>There are four main endpoints in the API:</p>
				<ul>
					<li>
						One for getting all narratives, used by the cover page
						to provide a list of narratives to choose from.
					</li>
					<li>
						One for getting a particular narrative, used in the
						Narrative page to display a description of the narrative
						and a list of chapters to choose from.
					</li>
					<li>
						One for getting a particular chapter within a narrative,
						used by the Chapter page. This uses a 0-index for the
						chapter in the URI to specify the chapter from the list
						in that narrative.
					</li>
					<li>
						One for getting a particular item, used by the Item
						page. The URI requires a narrative ID and a chapter
						index to facilitate good navigation.
					</li>
				</ul>
				<p>
					In the Chapter and Item pages, the user can navigate back
					and forth between items and chapters. For this to function,
					the API generates pointers to next chapter, previous
					chapter, next item, and previous item for both the chapter
					and the item endpoints. These pointers are URLs to those
					pages.
				</p>
				<p>
					For the item endpoint, the API needs to know which narrative
					and chapter the item is in, so any call to get an item
					requires both a narrative ID and a chapter index.
				</p>

				<h3>2.3 Database</h3>
				<p>
					For the database, we have chosen MongoDB as it is fast,
					simple to set up, and our data is semi-structured. In the
					database, we have decided to store items and narratives in
					separate collections. This follows our goal of a dynamic
					application, as this allows us to easily add new items or
					narratives, or possibly change existing narratives.
				</p>
				<p>
					Within each narrative, we store a description for that
					narrative and a list of chapters, each with their own
					introduction to explain the chapter. Each chapter then has a
					list of items, but as the items are stored separately, we
					only store the reference ID of each item. This allows us to
					make changes to an item and be sure that change propagates
					to all instances of that item in the application.
				</p>
				<p>
					However, this does mean that the descriptions of the items
					are general and do not provide any specificity to a
					particular narrative it is placed in.
				</p>

				<h2>3. Design Choices</h2>
				<p>
					For our application, we made the choice that there should be
					a clear separation between the primary pages and the
					auxiliary pages. By primary pages, we refer to pages
					providing the actual content the website was intended for,
					i.e. the Chapter and Item pages.
				</p>
				<p>
					The auxiliary pages refer to the "other" pages, such as
					providing a description of the application, the imaginary
					map for a museum, and other explanatory or navigatory pages.
					With this in mind, only the primary pages have proper
					styling, while the auxiliary pages have a more "sterile,"
					basic look. The primary pages are also the only ones
					affected by the choice of theme.
				</p>

				<h3>3.1 Base Layout</h3>
				<p>
					For the base layout in the Chapter and Item pages, our
					philosophy was to incorporate a tabular base layout,
					reminiscent of something you could find on an interactive
					screen at a museum. The idea was to create a box on the page
					wherein the content would be displayed.
				</p>
				<p>
					Within the box, you have the relevant content and a
					navigation bar at the bottom. While this box only takes up a
					subspace of the page and could be deemed inefficient, we
					chose this design with our core philosophy in mind.
					Furthermore, this choice allows us to make use of themes in
					a more satisfying way, as the whitespace outside the box
					would now be available to support the different themes.
				</p>
				<p>
					Within our base layout, we have chosen font sizes, paddings,
					and borders that all follow a consistent size to ensure that
					the content is easy to read and that the user can focus on
					the content. We wanted to avoid a cluttered look, so we
					chose consistent sizes. This also influences how we
					implemented a common layout for our themes. As a core rule,
					we chose to have a normalized padding and font size for the
					site and this was done to create familiarity for the user
					and not require them to adjust themselves to a new web
					experience.
				</p>
				<p>
					For the content, we wanted the tabular view to be consistent
					regardless of the text and image of the content displayed.
					We gave the image a third of the box's width and the text
					the rest. This was a good tradeoff, letting the image be
					large enough to be viewable and valuable but giving the text
					the majority of the space to dominate the box and be the
					obvious main visual part of the page, mimicking how it is
					supposed to be the most important part of the content.
				</p>
				<p>
					The buttons take up the space needed for easy and
					understandable navigation â€” not too small to be unclear, nor
					too big to over-dominate the box. We regard the metadata and
					QR code as content for extra-interested users. Because of
					this, we placed it "behind" the image as something you
					toggle to view, so it does not interrupt the experience of
					the common user with unnecessary information.
				</p>

				<h3>3.2 Themes</h3>
				<p>
					For our themes, we want them to be clear and obvious and
					have a large impact on the page and viewer experience, while
					not being overly ambitious and bordering onto obnoxious. We
					retained the base layout to maintain the user experience and
					not be too intrusive, centering our themes around a main
					background, font, and fitting changes to the border, as
					these are the main components of our base layout.
				</p>
				<p>
					With this, we created full themes, giving a certain feel to
					the user while not disrupting the experience as a whole. The
					backgrounds are intended to create a clear environment and
					are the main component of the theme. The fonts support the
					environment and add extra depth to the feeling. The borders
					provide a secondary effect to give an overall feel that
					supports the theme.
				</p>
				<p>
					Because the exhibition is based around a particular subset
					of Norwegian culture, we wanted to support it by choosing
					themes rooted in Norwegian culture. The four themes are:
				</p>
				<ul>
					<li>The Viking Era</li>
					<li>Norwegian Nature</li>
					<li>Nordic Style</li>
					<li>Scandinavian Minimalism</li>
				</ul>

				<h4>3.2.1 The Viking Era</h4>
				<p>
					The Viking Era is a staple of Norwegian heritage and has a
					well-known and clear historic profile. With this theme, we
					want to create a rune-scripture-like feeling of the page, as
					if the interface had been created by a Viking during the
					Viking Age.
				</p>
				<p>
					To do this, we added a font that looks like something from
					that age. Also, to give the feel of the page being written
					at that age, we added a light parchment paper background to
					mimic an old-looking book page. To complete the rough look,
					we added a thick, hard border.
				</p>

				<h4>3.2.2 Norwegian Nature</h4>
				<p>
					Norway is globally known for its grand and pristine nature
					of fjords, mountains, and valleys. For this theme, we wanted
					to create a feel of actually overlooking and experiencing
					this Norwegian nature.
				</p>
				<p>
					We use an image of Senja as the background, visualizing a
					fjord. The part of the image where the content is placed has
					good contrast, but we added an extra white background to the
					box to increase contrast, making the text easy to read.
				</p>
				<p>
					We chose an italic-like font to add to the outdoor and
					natural feel of the theme. This font resembles the
					hand-written greetings you would find in books inside
					specific cabins located in Norway. The border has a gradient
					created to blend more into the nature background, connecting
					to the Norwegian mindset of protecting nature from
					aggressive externalities, such as making all constructions
					like buildings blend into nature.
				</p>

				<h4>3.2.3 Nordic Style</h4>
				<p>
					This theme creates a traditional Norwegian feel. A central
					part of Norwegian culture is the connection to rural
					lifestyle, which was common before Norway discovered oil.
					From this period emerged traditional clothing such as the
					bunad (the national costume) and particular patterns, often
					knitted into sweaters or sewn into clothes.
				</p>
				<p>
					The Marius sweater is a modern example, while other patterns
					like the Selbu pattern also have this connection. We added a
					background resembling traditionally knitted clothing,
					containing the Selbu pattern along with pine trees, common
					in rural Norway.
				</p>
				<p>
					Supporting the theme, we chose a font resembling
					hand-written text. The border is also a pattern containing
					the three colors of the Norwegian flag: red, white, and
					blue. This is to add to the national feel of the theme.
				</p>

				<h4>3.2.4 Scandinavian Minimalism</h4>
				<p>
					Scandinavian minimalism, often referred to as
					Scandi-minimal, is a design philosophy based on simplicity,
					functionality, and calm aesthetics. It has clear roots in
					the Scandinavian personality, more introverted and calm by
					nature, with little focus on expressiveness or
					distinguishing oneself.
				</p>
				<p>
					For this theme, we chose a background image of walls from a
					home with this design, as this section functions well as a
					fitting background with little noise. The silky and quiet
					aesthetic is continued in the sleek font, while the border
					is also overly slim, focusing on being quiet but functional.
				</p>
				<h3>3.3 Other</h3>
				<p>
					When loading content from the database, the application
					briefly renders a loading animation. This source code is
					copied from an older project and was originally generated
					with ChatGPT.
				</p>
			</div>
		</>
	);
}

export default DocumentationPage;
